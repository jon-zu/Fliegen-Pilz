using System.Buffers.Binary;
using System.Security.Cryptography;

namespace FliegenPilz.Crypto;

public class IgContext
{
    public static readonly byte[] DefaultIgShuffle =
    [
        0xec, 0x3f, 0x77, 0xa4, 0x45, 0xd0, 0x71, 0xbf, 
        0xb7, 0x98, 0x20, 0xfc, 0x4b, 0xe9, 0xb3, 0xe1, 
        0x5c, 0x22, 0xf7, 0x0c, 0x44, 0x1b, 0x81, 0xbd, 
        0x63, 0x8d, 0xd4, 0xc3, 0xf2, 0x10, 0x19, 0xe0, 
        0xfb, 0xa1, 0x6e, 0x66, 0xea, 0xae, 0xd6, 0xce, 
        0x06, 0x18, 0x4e, 0xeb, 0x78, 0x95, 0xdb, 0xba, 
        0xb6, 0x42, 0x7a, 0x2a, 0x83, 0x0b, 0x54, 0x67, 
        0x6d, 0xe8, 0x65, 0xe7, 0x2f, 0x07, 0xf3, 0xaa, 
        0x27, 0x7b, 0x85, 0xb0, 0x26, 0xfd, 0x8b, 0xa9, 
        0xfa, 0xbe, 0xa8, 0xd7, 0xcb, 0xcc, 0x92, 0xda, 
        0xf9, 0x93, 0x60, 0x2d, 0xdd, 0xd2, 0xa2, 0x9b, 
        0x39, 0x5f, 0x82, 0x21, 0x4c, 0x69, 0xf8, 0x31, 
        0x87, 0xee, 0x8e, 0xad, 0x8c, 0x6a, 0xbc, 0xb5, 
        0x6b, 0x59, 0x13, 0xf1, 0x04, 0x00, 0xf6, 0x5a, 
        0x35, 0x79, 0x48, 0x8f, 0x15, 0xcd, 0x97, 0x57, 
        0x12, 0x3e, 0x37, 0xff, 0x9d, 0x4f, 0x51, 0xf5, 
        0xa3, 0x70, 0xbb, 0x14, 0x75, 0xc2, 0xb8, 0x72, 
        0xc0, 0xed, 0x7d, 0x68, 0xc9, 0x2e, 0x0d, 0x62, 
        0x46, 0x17, 0x11, 0x4d, 0x6c, 0xc4, 0x7e, 0x53, 
        0xc1, 0x25, 0xc7, 0x9a, 0x1c, 0x88, 0x58, 0x2c, 
        0x89, 0xdc, 0x02, 0x64, 0x40, 0x01, 0x5d, 0x38, 
        0xa5, 0xe2, 0xaf, 0x55, 0xd5, 0xef, 0x1a, 0x7c, 
        0xa7, 0x5b, 0xa6, 0x6f, 0x86, 0x9f, 0x73, 0xe6, 
        0x0a, 0xde, 0x2b, 0x99, 0x4a, 0x47, 0x9c, 0xdf, 
        0x09, 0x76, 0x9e, 0x30, 0x0e, 0xe4, 0xb2, 0x94, 
        0xa0, 0x3b, 0x34, 0x1d, 0x28, 0x0f, 0x36, 0xe3, 
        0x23, 0xb4, 0x03, 0xd8, 0x90, 0xc8, 0x3c, 0xfe, 
        0x5e, 0x32, 0x24, 0x50, 0x1f, 0x3a, 0x43, 0x8a, 
        0x96, 0x41, 0x74, 0xac, 0x52, 0x33, 0xf0, 0xd9, 
        0x29, 0x80, 0xb1, 0x16, 0xd3, 0xab, 0x91, 0xb9, 
        0x84, 0x7f, 0x61, 0x1e, 0xcf, 0xc5, 0xd1, 0x56, 
        0x3d, 0xca, 0xf4, 0x05, 0xc6, 0xe5, 0x08, 0x49
    ];

    public const uint DefaultIgSeed = 0xC65053F2;
    private readonly byte[] _shuffleKey;

    public IgContext(byte[] shuffleKey, uint initialSeed)
    {
        if(shuffleKey.Length != 256)
            throw new ArgumentException("Shuffle key must be 256 bytes.", nameof(shuffleKey));
        _shuffleKey = shuffleKey;
        InitialSeed = initialSeed;
    }
    
    
    
    public uint InitialSeed { get; }

    public static readonly IgContext Default = new IgContext(DefaultIgShuffle, DefaultIgSeed);


    private byte Shuffle(byte a) => _shuffleKey[a];
    
    public uint UpdateKey(uint key, byte data)
    {
        Span<byte> k = stackalloc byte[4];
        BinaryPrimitives.WriteUInt32LittleEndian(k, key);

        k[0] = (byte)(k[0] + (byte)(Shuffle(k[1]) - data));
        k[1] = (byte)(k[1] - (k[2] ^ Shuffle(data)));
        k[2] ^= (byte)(Shuffle(k[3]) + data);
        k[3] = (byte)(k[3] - (k[0] - Shuffle(data)));
        
        
        var v = BinaryPrimitives.ReadUInt32LittleEndian(k); 
        return uint.RotateLeft(v, 3);
    }
}

public class IgHashAlgorithm: HashAlgorithm
{
    private uint _state;
    private IgContext _context;

    public IgHashAlgorithm(IgContext context)
    {
        _context = context;
        _state = context.InitialSeed;
        Initialize();
    }

    public sealed override void Initialize()
    {
    }

    protected override void HashCore(byte[] array, int ibStart, int cbSize)
    {
        for (var i = ibStart; i < ibStart + cbSize; i++)
            _state = _context.UpdateKey(_state, array[i]);
    }

    protected override byte[] HashFinal()
    {
        byte[] result = new byte[4];
        BinaryPrimitives.WriteUInt32LittleEndian(result, _state);
        return result;
    }

   
}